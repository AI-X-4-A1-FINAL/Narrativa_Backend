name: Deploy to Amazon ECS using Docker Compose

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Java 환경 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Gradle 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 5. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. Docker Compose 설치
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # 7. Docker Compose 버전 확인
      - name: Verify Docker Compose installation
        run: docker compose version

      # 8. AWS CLI 버전 확인
      - name: Verify AWS CLI installation
        run: aws --version

      # 9. Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 10. docker-compose.ecs.yml 파일 확인
      - name: Verify docker-compose.ecs.yml file exists
        run: |
          if [ ! -f docker-compose.ecs.yml ]; then
            echo "ERROR: docker-compose.ecs.yml file not found."
            exit 1
          fi

      # 11. Docker 이미지 빌드 및 푸시
      - name: Build and tag Docker image using Docker Compose
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # 최신 코드 가져오기
          git fetch origin main
          git checkout main
          git pull origin main

          # Docker Compose로 이미지 빌드
          docker compose -f docker-compose.ecs.yml build \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            --build-arg S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
            --build-arg S3_FILE_KEY=${{ secrets.S3_FILE_KEY }}
          # Docker 이미지 태깅 및 푸시
          docker tag narrativa-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 12. ECS 태스크 정의 업데이트
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: config/ecs-task-definition.json
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

      # 13. ECS에 배포
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
