name: Auto Merge, Build, and Deploy using Docker Compose

on:
  schedule:
    - cron: '05 3 * * *' # 매일 03:05 (UTC 기준)
  workflow_dispatch: # 수동 실행 가능

permissions:
  contents: write
  pull-requests: write

jobs:
  auto_merge_build_deploy:
    runs-on: ubuntu-latest
    outputs:
      has_new_commits: ${{ env.has_new_commits }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.MY_GITHUB_TOKEN }}
          submodules: true


      - name: Configure Git
        run: |
          git config --global user.email "ppuding3861@gmail.com"
          git config --global user.name "ppudding3861"


      - name: Check for new commits in feat/* branches
        id: check_commits
        run: |
          git fetch --all
          NEW_COMMITS_COUNT=$(git rev-list --count --remotes="origin/feat/*" --not origin/dev)
          if [ "$NEW_COMMITS_COUNT" -eq 0 ]; then
            echo "has_new_commits=false" >> $GITHUB_ENV
          else
            echo "has_new_commits=true" >> $GITHUB_ENV
          fi


      - name: Create or Find PRs from feat/* branches to dev
        if: env.has_new_commits == 'true'
        env:
          GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          git for-each-ref --format '%(refname:short)' refs/remotes/origin/feat/* | while read -r TARGET_BRANCH; do
            TARGET_BRANCH=${TARGET_BRANCH#origin/}
            PR_URL=$(gh pr list --base dev --head "$TARGET_BRANCH" --json url --jq '.[0].url' || echo "")
            if [ -z "$PR_URL" ]; then
              PR_URL=$(gh pr create --base dev --head "$TARGET_BRANCH" --title "Auto merge $TARGET_BRANCH into dev" --body "자동 생성된 Pull Request" || echo "")
            fi
          done


      - name: Auto-merge pull requests
        if: env.has_new_commits == 'true'
        env:
          GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          git for-each-ref --format '%(refname:short)' refs/remotes/origin/feat/* | while read -r TARGET_BRANCH; do
            TARGET_BRANCH=${TARGET_BRANCH#origin/}
            PR_URL=$(gh pr list --base dev --head "$TARGET_BRANCH" --json url --jq '.[0].url' || echo "")
            if [ -n "$PR_URL" ]; then
              gh pr merge "$PR_URL" --merge || echo "Merge failed for $PR_URL."
            fi
          done


      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version


      - name: Log in to Docker Hub
        if: env.has_new_commits == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image using Docker Compose
        if: env.has_new_commits == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_FILE_KEY: ${{ secrets.S3_FILE_KEY }}

        run: |
          git fetch origin dev
          git checkout dev
          git pull origin dev

  
          docker-compose build narrativa-backend
          docker tag narrativa-backend:latest ${{ secrets.DOCKER_USERNAME }}/narrativa_backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/narrativa_backend:latest

  deploy_local:
    runs-on: self-hosted
    needs: auto_merge_build_deploy
    if: needs.auto_merge_build_deploy.outputs.has_new_commits == 'true'

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Remove existing containers and images
        shell: pwsh
        run: |
          try {
            # 강제로 컨테이너 중지 및 제거
            docker ps -a --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/narrativa_backend:latest" --format "{{.ID}}" | ForEach-Object {
              docker stop $_
              docker rm $_
            }
            Write-Output "Successfully stopped and removed all related containers"
          } catch {
            Write-Output "No containers to remove or an error occurred: $_"
          }

          try {
            # 이미지를 강제로 삭제
            docker rmi -f ${{ secrets.DOCKER_USERNAME }}/narrativa_backend:latest
            Write-Output "Successfully removed image narrativa_backend:latest"
          } catch {
            Write-Output "No images to remove or an error occurred: $_"
          }

      - name: Pull Docker image from Docker Hub and run using Docker Compose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_FILE_KEY: ${{ secrets.S3_FILE_KEY }}
        shell: pwsh
        run: |
          try {
            docker-compose pull narrativa-backend
            Write-Output "Successfully pulled the latest Docker image"
          } catch {
            Write-Output "Error pulling the Docker image: $_"
            exit 1
          }

          try {
            docker-compose up -d
            Write-Output "Successfully started containers using Docker Compose"
          } catch {
            Write-Output "Error starting containers: $_"
            exit 1
          }
  
  
  
  
  
